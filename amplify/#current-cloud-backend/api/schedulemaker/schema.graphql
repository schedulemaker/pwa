input BannerArgs {
	term: Int
	subject: String
	offset: Int
	pageSize: Int
	openOnly: Boolean
	crn: Int
	max: Int
}

type BannerMetadata {
	code: String!
	description: String!
}

type UserSchedule {
    username: ID
    scheduleId: ID,
    schedule: LoadUserSchedule 
}

type LoadUserSchedule {
    sections: [Section]
    commute: Boolean
    totalDistance: Float
    times: [Int],
    density: Int,
    days: Days,
    instructors: [Int]
}

input UserScheduleInput {
    sections: [SectionInput]
    commute: Boolean
    totalDistance: Float
    username: ID
    scheduleId: ID,
    times: [Int],
    density: Int,
    days: DaysInput,
    instructors: [Int]
}

type Days {
    monday: Boolean,
    tuesday: Boolean,
    wednesday: Boolean,
    thursday: Boolean,
    friday: Boolean,
    saturday: Boolean,
    sunday: Boolean
}

input DaysInput {
    monday: Boolean,
    tuesday: Boolean,
    wednesday: Boolean,
    thursday: Boolean,
    friday: Boolean,
    saturday: Boolean,
    sunday: Boolean
}

type Section {
    isOpen: Boolean
    campus: String
    meetingTimes: [MeetingTime]
    courseName: String!
    crn: Int!
    title: String
}

type MeetingTime {
    startTime: Int
    endTime: Int
    building: String
    room: String
    instructors: [Instructor]
    weeks: [Int]
    monday: Boolean
    tuesday: Boolean
    wednesday: Boolean
    thursday: Boolean
    friday: Boolean
    saturday: Boolean
    sunday: Boolean
}

type Instructor {
    ID: Int,
    Name: String
}

input InstructorInput {
    ID: Int,
    Name: String
}

input SectionInput {
    isOpen: Boolean
    campus: String
    meetingTimes: [MeetingTimeInput]
    courseName: String!
    crn: Int!
    title: String
}

input MeetingTimeInput {
    startTime: Int
    endTime: Int
    building: String
    room: String
    instructors: [InstructorInput]
    weeks: [Int]
    monday: Boolean
    tuesday: Boolean
    wednesday: Boolean
    thursday: Boolean
    friday: Boolean
    saturday: Boolean
    sunday: Boolean
}

input TimeBlock {
    day: String!
    startTime: Int!
    endTime: Int! 
}

type Course {
    courseName: String!
    title: String!
}

type Query {
    getUserSchedules(username: String!): [UserSchedule]
	getBannerMetadata(school: String!, term: Int!, method: String!, params: BannerArgs): [BannerMetadata] # For anything that IS NOT a CLASS SEARCH or CATALOG SEARCH or COURSE DESCRIPTION
    # getCourseDescription(event: BannerProxyInput): String # For COURSE DESCRIPTIONS ONLY
    getCourseList: [Course]
}

type Mutation {
    saveUserSchedule(username: String!, schedule: UserScheduleInput!): String
    createSchedules(courses: [String]!, campuses: [String]!, school: String!, term: Int!): [[Section]]
}

schema {
	query: Query
    mutation: Mutation
}
